/*
 * Copyright 2025 https://github.com/openapi-processor/openapi-processor-gradle
 * PDX-License-Identifier: Apache-2.0
 */

package io.openapiprocessor.gradle

import org.gradle.api.DefaultTask
import org.gradle.api.file.ConfigurableFileCollection
import org.gradle.api.file.DirectoryProperty
import org.gradle.api.provider.MapProperty
import org.gradle.api.provider.Property
import org.gradle.api.tasks.Classpath
import org.gradle.api.tasks.InputDirectory
import org.gradle.api.tasks.Internal
import org.gradle.api.tasks.OutputDirectory
import org.gradle.api.tasks.TaskAction
import org.gradle.workers.WorkerExecutor

import javax.inject.Inject

/**
 * processor task. Uses a worker executor to run the processor with an isolated "openapiProcessor"
 * configuration classpath.
 */
abstract class OpenApiProcessorTask: DefaultTask() {

    /**
     * Source directory (i.e. parent) of the openapi.yaml input file. Used by gradle for the up-to-date check.
     *
     * @return parent directory of the openapi.yaml
     */
    @InputDirectory
    abstract fun getApiDir(): DirectoryProperty

    /**
     * Target directory for the sources generated by the processor. Used by gradle for the up-to-date check.
     *
     * @return target directory
     */
    @OutputDirectory
    abstract fun getTargetDir(): DirectoryProperty

    /**
     * The dependencies of the processor.
     *
     * @return the processor dependencies
     */
    @Classpath
    abstract fun getDependencies(): ConfigurableFileCollection

    /**
     * name of the processor.
     *
     * @return the processor name.
     */
    @Internal
    abstract fun getProcessorName(): Property<String>

    /**
     * properties configured by the processor closure in the OpenApiProcessorExtension.
     *
     * @return the processor properties
     */
    @Internal
    abstract fun getProcessorProps(): MapProperty<String, Any>

    @Inject
    abstract fun getWorkerExecutor(): WorkerExecutor

    /**
     * runs the configured processor with its own classloader.
     */
    @TaskAction
    fun runProcessor() {
        val theProcessorName = getProcessorName()
        val theProcessorProps = getProcessorProps()
        val extension = OpenApiProcessorExtensionUtils.getExtension(project)

        getWorkerExecutor().classLoaderIsolation {
            classpath.from(getDependencies())

        }.submit(OpenApiProcessorWorker::class.java) {
            getProcessorName().set(theProcessorName)
            getProcessorProps().set(theProcessorProps)
            getRootDir().set(project.rootDir.absolutePath)
            getCheckUpdates().set(extension.checkUpdates)
        }
    }
}
