/*
 * Copyright 2019 https://github.com/openapi-processor/openapi-processor-gradle
 * PDX-License-Identifier: Apache-2.0
 */

package io.openapiprocessor.gradle;

import org.gradle.api.DefaultTask;
import org.gradle.api.file.ConfigurableFileCollection;
import org.gradle.api.provider.MapProperty;
import org.gradle.api.provider.Property;
import org.gradle.api.tasks.Classpath;
import org.gradle.api.tasks.InputDirectory;
import org.gradle.api.tasks.InputFile;
import org.gradle.api.tasks.Internal;
import org.gradle.api.tasks.OutputDirectory;
import org.gradle.api.tasks.TaskAction;
import org.gradle.workers.WorkQueue;
import org.gradle.workers.WorkerExecutor;

import javax.inject.Inject;

import static io.openapiprocessor.gradle.OpenApiProcessorExtensionUtils.getExtension;

/**
 * processor task. Uses a worker executor to run the processor with an isolated "openapiProcessor"
 * configuration classpath.
 */
abstract public class OpenApiProcessorTask extends DefaultTask {

    /**
     * Source directory (i.e. parent) of the openapi.yaml input file. Used by gradle for the up-to-date check.
     *
     * @return parent directory of the openapi.yaml
     */
    @InputDirectory
    abstract public Property<String> getApiDir();

    /**
     * A reference to the mapping.yaml file. Used by gradle for the up-to-date check.
     *
     * @return the input mapping file
     */
    @InputFile
    abstract public Property<String> getMappingFile();

    /**
     * Target directory for the sources generated by the processor. Used by gradle for the up-to-date check.
     *
     * @return target directory
     */
    @OutputDirectory
    abstract public Property<String> getTargetDir();

    /**
     * The dependencies of the processor.
     *
     * @return the processor dependencies
     */
    @Classpath
    abstract public ConfigurableFileCollection getDependencies();

    /**
     * name of the processor.
     *
     * @return the processor name.
     */
    @Internal
    abstract public Property<String> getProcessorName();

    /**
     * properties configured by the processor closure in the OpenApiProcessorExtension.
     *
     * @return the processor properties
     */
    @Internal
    abstract public MapProperty<String, Object> getProcessorProps();

    @Inject
    abstract public WorkerExecutor getWorkerExecutor();

    /**
     * runs the configured processor with its own classloader.
     */
    @TaskAction
    public void runProcessor () {
        WorkQueue workQueue = getWorkerExecutor ().classLoaderIsolation (
            workerSpec -> workerSpec.getClasspath ().from (getDependencies ()));

        var extension = getExtension(getProject());

        workQueue.submit(OpenApiProcessorWorker.class, parameters -> {
            parameters.getProcessorName ().set (getProcessorName ());
            parameters.getProcessorProps ().set (getProcessorProps ());
            parameters.getRootDir().set(getProject().getRootDir().getAbsolutePath());
            parameters.getCheckUpdates().set(extension.getCheckUpdates());
        });
    }

}
